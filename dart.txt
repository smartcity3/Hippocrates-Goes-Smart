import 'package:flutter/material.dart';

import 'package:firebase_database/firebase_database.dart';
import 'package:firebase_database/ui/firebase_animated_list.dart';
// import 'package:firebase_core/firebase_core.dart'; not nessecary



void main() => runApp(MyApp());

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Flutter Demo',
     //theme: ThemeData(),
      home: Home(),
    );
  }
}

class Home extends StatefulWidget {
  @override
  HomeState createState() => HomeState();
}

class HomeState extends State<Home> {
  List<Item> items = List();
  Item item;
  DatabaseReference itemRef;

  ///////////////////////////////////
  List<String> strings =["WATER","CLOSE","START","STOP"];
  String displayedString="";
  final DatabaseReference database = FirebaseDatabase.instance.reference().child("test");
  sendData() {
    // database.push().set({
    //'hlektrovana' : 'w'
    //});
    Map<String, String> data =<String, String>{
      "hlektrovana":"water"
    };
    database.update(data);
    setState(() {
      displayedString= strings[0];
      //counter= counter <2 ? counter +1:0;
    });
  }
  sendDataSTART() {
    // database.push().set({
    //'hlektrovana' : 'w'
    //});
    Map<String, String> data =<String, String>{
      "KYTION":"start"
    };
    database.update(data);
    setState(() {
      displayedString= strings[2];
      //counter= counter <2 ? counter +1:0;
    });
  }
  sendDataSTOP() {
    // database.push().set({
    //'hlektrovana' : 'w'
    //});
    Map<String, String> data =<String, String>{
      "KYTION":"stop"
    };
    database.update(data);
    setState(() {
      displayedString= strings[3];
      //counter= counter <2 ? counter +1:0;
    });
  }
  updateData(){
    Map<String, String> data =<String, String>{
      "hlektrovana":"close"
    };
    database.update(data);
    setState(() {
      displayedString= strings[1];
      //counter= counter <2 ? counter +1:0;
    });
    //database.push().set({
    //'hlektrovana' : 'c'
    //});
  }
  //////////////////////////////////
  final GlobalKey<FormState> formKey = GlobalKey<FormState>();

  @override
  void initState() {
    super.initState();
    item = Item("", "");
    final FirebaseDatabase database = FirebaseDatabase.instance; //Rather then just writing FirebaseDatabase(), get the instance.
    itemRef = database.reference().child('items');
    itemRef.onChildAdded.listen(_onEntryAdded);
    itemRef.onChildChanged.listen(_onEntryChanged);
  }

  _onEntryAdded(Event event) {
    setState(() {
      items.add(Item.fromSnapshot(event.snapshot));
    });
  }

  _onEntryChanged(Event event) {
    var old = items.singleWhere((entry) {
      return entry.key == event.snapshot.key;
    });
    setState(() {
      items[items.indexOf(old)] = Item.fromSnapshot(event.snapshot);
    });
  }

  void handleSubmit() {
    final FormState form = formKey.currentState;

    if (form.validate()) {
      form.save();
      form.reset();
      itemRef.push().set(item.toJson());
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('??????'),
        leading: new Icon(Icons.home),
        backgroundColor: Colors.green,

      ),
      resizeToAvoidBottomPadding: false,
      backgroundColor: Color(0xFF2C3C43),////fodo xrwma
      body: Column(
        children: <Widget>[

          Flexible(
            child: FirebaseAnimatedList(
              query: itemRef,
              itemBuilder: (BuildContext context, DataSnapshot snapshot,
                  Animation<double> animation, int index) {
                return new ListTile(
                  leading: Icon(Icons.message,color:Colors.white),
                  title: Text(items[index].title,style: new TextStyle(color: Colors.white,fontWeight:  FontWeight.normal,fontSize: 24.0)),
                  subtitle: Text(items[index].body,style: new TextStyle(color: Colors.red,fontSize: 30.0)),
                );
              },
            ),
          ),

         // new Text(displayedString,
           //style: new TextStyle(
          //fontWeight:  FontWeight.w900,
           //fontSize: 50.0,
           //fontFamily:'Roboto',
            //color: Colors.white,
           //),
          //),
          //new Text(displayedString,
          //style: new TextStyle(
            //fontWeight:  FontWeight.w900,
             //fontSize: 50.0,
             //fontFamily:'Roboto',
             //color: Colors.white,
           //),
          //),

          new Row(
            mainAxisAlignment: MainAxisAlignment.spaceAround,
            children: <Widget>[
              new RaisedButton(
                onPressed: () => sendData(),
                child: Text("OPEN",style: TextStyle(fontWeight: FontWeight.w900)),
                color: Colors.green,
                textColor: Colors.white,
                padding: const EdgeInsets.symmetric(horizontal: 22,vertical: 20),
                elevation: 30.0,
                splashColor: Colors.grey,
              ),
              new Column(children: <Widget>[
                new RaisedButton(
                  onPressed:updateData,
                  child: Text("CLOSE",style: TextStyle(fontWeight: FontWeight.w900)),
                  color: Colors.green,
                  textColor: Colors.white,
                  padding: const EdgeInsets.symmetric(horizontal: 22,vertical: 20),
                  elevation: 30.0,
                  splashColor: Colors.grey,
                ),
              ]),
              new Column(children: <Widget>[
                new RaisedButton(
                  onPressed:sendDataSTART,
                  child: Text("START",style: TextStyle(fontWeight: FontWeight.w900)),
                  color: Colors.green,
                  textColor: Colors.white,
                  padding: const EdgeInsets.symmetric(horizontal: 22,vertical: 20),
                  elevation: 30.0,
                  splashColor: Colors.grey,
                ),
              ]),
              new Column(children: <Widget>[
                new RaisedButton(
                  onPressed:sendDataSTOP,
                  child: Text("STOP",style: TextStyle(fontWeight: FontWeight.w900)),
                  color: Colors.green,
                  textColor: Colors.white,
                  padding: const EdgeInsets.symmetric(horizontal: 22,vertical: 20),
                  elevation: 30.0,
                  splashColor: Colors.grey,
                ),
              ]),
            ],
          ),

        ],
      ),
    );
  }
}

class Item {
  String key;
  String title;
  String body;

  Item(this.title, this.body);

  Item.fromSnapshot(DataSnapshot snapshot)
      : key = snapshot.key,
        title = snapshot.value["title"],
        body = snapshot.value["body"];

  toJson() {
    return {
      "title": title,
      "body": body,
    };
  }
}
name: firebasetemperature
description: A new Flutter project.

dependencies:
  flutter:
    sdk: flutter

  # The following adds the Cupertino Icons font to your application.
  # Use with the CupertinoIcons class for iOS style icons.
  cupertino_icons: ^0.1.0

  firebase_database: ^2.0.3 #Updated to latest version
  # firebase_core: any Not needed for this implementation.

dev_dependencies:
  flutter_test:
    sdk: flutter


# For information on the generic Dart part of this file, see the
# following page: https://www.dartlang.org/tools/pub/pubspec

# The following section is specific to Flutter.
flutter:

  # The following line ensures that the Material Icons font is
  # included with your application, so that you can use the icons in
  # the material Icons class.
  uses-material-design: true

  # To add assets to your application, add an assets section, like this:
  # assets:
  #  - images/a_dot_burr.jpeg
  #  - images/a_dot_ham.jpeg

  # An image asset can refer to one or more resolution-specific "variants", see
  # https://flutter.io/assets-and-images/#resolution-aware.

  # For details regarding adding assets from package dependencies, see
  # https://flutter.io/assets-and-images/#from-packages

  # To add custom fonts to your application, add a fonts section here,
  # in this "flutter" section. Each entry in this list should have a
  # "family" key with the font family name, and a "fonts" key with a
  # list giving the asset and other descriptors for the font. For
  # example:
  # fonts:
  #   - family: Schyler
  #     fonts:
  #       - asset: fonts/Schyler-Regular.ttf
  #       - asset: fonts/Schyler-Italic.ttf
  #         style: italic
  #   - family: Trajan Pro
  #     fonts:
  #       - asset: fonts/TrajanPro.ttf
  #       - asset: fonts/TrajanPro_Bold.ttf
  #         weight: 700
  #
  # For details regarding fonts from package dependencies,
  # see https://flutter.io/custom-fonts/#from-packages